[
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "Exercise 21 and 22",
    "section": "",
    "text": "library(dataRetrieval)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.2\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nlibrary(lubridate)\nlibrary(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:zoo':\n\n    index\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\nlibrary(feasts)\n\nLoading required package: fabletools\n\nAttaching package: 'fabletools'\n\nThe following object is masked from 'package:yardstick':\n\n    accuracy\n\nThe following object is masked from 'package:parsnip':\n\n    null_model\n\nThe following objects are masked from 'package:infer':\n\n    generate, hypothesize\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Example: Cache la Poudre River at Mouth (USGS site 06752260)\npoudre_flow &lt;- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2013-01-01\",   # Set the start date\n                          endDate = \"2023-12-31\") |&gt;  # Set the end date\n  renameNWISColumns() |&gt;                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = yearmonth(Date)) |&gt;                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) |&gt;                                   # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2013-01-01&endDT=2023-12-31\n\n\n#1: Convert to tsibble\n\npoud_tbl &lt;- as_tsibble(poudre_flow)\n\nUsing `Date` as index variable.\n\nhead(poud_tbl)\n\n# A tsibble: 6 x 2 [1M]\n      Date   Flow\n     &lt;mth&gt;  &lt;dbl&gt;\n1 2013 Jan  18.1 \n2 2013 Feb  18.0 \n3 2013 Mar   8.21\n4 2013 Apr   5.94\n5 2013 May 333.  \n6 2013 Jun 300.  \n\n\n#2: Plotting the time series\n\nflow_plot &lt;- ggplot(poudre_flow, aes(x = Date, y = Flow)) + \n  geom_line(color = \"blue\") + \n  labs(title = \"Cache la Poudre River Streamflow\", \n       x = \"Date\", y = \"Flow (cfs)\") + \n  theme_minimal ()\nggplotly(flow_plot)\n\n\n\n\n\n#3: Subseries plot\n\ngg_subseries(poud_tbl) + \n  labs(title = \"Monthly Streamflow Patterns\", y = \"Flow\", x = \"Year\") + \n  theme_minimal()\n\nPlot variable not specified, automatically selected `y = Flow`\n\n\n\n\n\n\n\n\n\n#I noticed very high streamflow levels in May and June. This could be caused by spring precipitation, snowmelt, or glacial melt when temperatures begin increasing after winter. I also noticed that streamflow is very consistently low from October to March, which could be consistent with cooler temperatures preventing melting of snow, as well as less precipitation in general. The subseries compares streamflow taken at the same time each year for 10 years, so that we can compare differences from year to year in streamflow. Things like flooding can be seen, and in this subseries there is a possible flood in September within the 10 year period.\n#4: Decompose\n\npoud_decomp &lt;- stl(poud_tbl, s.window = \"periodic\") |&gt;\n  plot()\n\n\n\n\n\n\n\n\n#Seasonal streamflow has stayed relatively the same across the data, which spans over a 10 year period. see small patterns of lower streamflow in 2020 versus higher streamflow in 2014-2016. Seasonal portrayal of the data is the most effective due to the seasonal changes of streamflow, which increase and decrease in relation to snowmelt and rainfall."
  },
  {
    "objectID": "exercise_21_and_22.html",
    "href": "exercise_21_and_22.html",
    "title": "Exercise 21 and 22",
    "section": "",
    "text": "#Exercise 21:\n\nlibrary(dataRetrieval)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.2\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nlibrary(lubridate)\nlibrary(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:zoo':\n\n    index\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\nlibrary(feasts)\n\nLoading required package: fabletools\n\nAttaching package: 'fabletools'\n\nThe following object is masked from 'package:yardstick':\n\n    accuracy\n\nThe following object is masked from 'package:parsnip':\n\n    null_model\n\nThe following objects are masked from 'package:infer':\n\n    generate, hypothesize\n\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# Example: Cache la Poudre River at Mouth (USGS site 06752260)\npoudre_flow &lt;- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2013-01-01\",   # Set the start date\n                          endDate = \"2023-12-31\") |&gt;  # Set the end date\n  renameNWISColumns() |&gt;                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = yearmonth(Date)) |&gt;                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) |&gt;                                   # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2013-01-01&endDT=2023-12-31\n\n\n#1: Convert to tsibble\n\npoud_tbl &lt;- as_tsibble(poudre_flow)\n\nUsing `Date` as index variable.\n\nhead(poud_tbl)\n\n# A tsibble: 6 x 2 [1M]\n      Date   Flow\n     &lt;mth&gt;  &lt;dbl&gt;\n1 2013 Jan  18.1 \n2 2013 Feb  18.0 \n3 2013 Mar   8.21\n4 2013 Apr   5.94\n5 2013 May 333.  \n6 2013 Jun 300.  \n\n\n#2: Plotting the time series\n\nflow_plot &lt;- ggplot(poudre_flow, aes(x = Date, y = Flow)) + \n  geom_line(color = \"blue\") + \n  labs(title = \"Cache la Poudre River Streamflow\", \n       x = \"Date\", y = \"Flow (cfs)\") + \n  theme_minimal ()\nggplotly(flow_plot)\n\n\n\n\n\n#3: Subseries plot\n\ngg_subseries(poud_tbl) + \n  labs(title = \"Monthly Streamflow Patterns\", y = \"Flow\", x = \"Year\") + \n  theme_minimal()\n\nPlot variable not specified, automatically selected `y = Flow`\n\n\n\n\n\n\n\n\n\n#I noticed very high streamflow levels in May and June. This could be caused by spring precipitation, snowmelt, or glacial melt when temperatures begin increasing after winter. I also noticed that streamflow is very consistently low from October to March, which could be consistent with cooler temperatures preventing melting of snow, as well as less precipitation in general. The subseries compares streamflow taken at the same time each year for 10 years, so that we can compare differences from year to year in streamflow. Things like flooding can be seen, and in this subseries there is a possible flood in September within the 10 year period.\n#4: Decompose\n\npoud_decomp &lt;- stl(poud_tbl, s.window = \"periodic\") |&gt;\n  plot()\n\n\n\n\n\n\n\n\n#Seasonal streamflow has stayed relatively the same across the data, which spans over a 10 year period. see small patterns of lower streamflow in 2020 versus higher streamflow in 2014-2016. Seasonal portrayal of the data is the most effective due to the seasonal changes of streamflow, which increase and decrease in relation to snowmelt and rainfall.\n#Exercise 22:\n#Modeltime 12 month prediction:\n\nlibrary(modeltime)\nlibrary(tidymodels)\nlibrary(timetk)\n\npoud_pred_tbl &lt;- tsibble::as_tsibble(poudre_flow) |&gt;\n  as_tibble() |&gt;\n  mutate(date = as.Date(Date), Date = NULL)\n\nUsing `Date` as index variable.\n\nsplits &lt;- time_series_split(poud_pred_tbl, assess = \"12 months\", cumulative = TRUE)\n\nUsing date_var: date\n\npoud_training &lt;- training(splits)\npoud_testing &lt;- testing(splits)\n\n#Prophet Model\n\nproph_mod &lt;- arima_reg() |&gt; set_engine(\"auto_arima\")\narima_mod &lt;- prophet_reg() |&gt; set_engine(\"prophet\")\n\nmods &lt;- list(\n  fit(proph_mod, Flow ~ date, data = poud_training), \n  fit(arima_mod, Flow ~ date, data = poud_training)\n)\n\nfrequency = 12 observations per 1 year\n\n\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n\n\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n\n\n\nmodels_tbl &lt;- as_modeltime_table(mods)\nprint(models_tbl)\n\n# Modeltime Table\n# A tibble: 2 × 3\n  .model_id .model   .model_desc            \n      &lt;int&gt; &lt;list&gt;   &lt;chr&gt;                  \n1         1 &lt;fit[+]&gt; ARIMA(0,0,2)(0,1,2)[12]\n2         2 &lt;fit[+]&gt; PROPHET                \n\n\n\ncalibration_table &lt;- models_tbl |&gt;\n  modeltime_calibrate(new_data = poud_testing)\nprint(calibration_table)\n\n# Modeltime Table\n# A tibble: 2 × 5\n  .model_id .model   .model_desc             .type .calibration_data\n      &lt;int&gt; &lt;list&gt;   &lt;chr&gt;                   &lt;chr&gt; &lt;list&gt;           \n1         1 &lt;fit[+]&gt; ARIMA(0,0,2)(0,1,2)[12] Test  &lt;tibble [12 × 4]&gt;\n2         2 &lt;fit[+]&gt; PROPHET                 Test  &lt;tibble [12 × 4]&gt;\n\n\n\nmodeltime_accuracy(calibration_table) |&gt;\n  arrange(mae)\n\n# A tibble: 2 × 9\n  .model_id .model_desc             .type   mae  mape  mase smape  rmse   rsq\n      &lt;int&gt; &lt;chr&gt;                   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1         1 ARIMA(0,0,2)(0,1,2)[12] Test   105.  86.2 0.380  50.6  246. 0.965\n2         2 PROPHET                 Test   161. 381.  0.582 161.   228. 0.855\n\n\n\n(forecast &lt;- calibration_table |&gt;\n   modeltime_forecast(h = \"12 months\", \n                      new_data = poud_testing, \n                      actual_data = poud_tbl))\n\nError: No date or date-time identified.\n\n\nWarning: Unknown or uninitialised column: `.key`.\n\n\n# Forecast Results\n  \n\n\nConf Method: conformal_default | Conf Interval: 0.95 | Conf By ID: FALSE\n(GLOBAL CONFIDENCE)\n\n\n# A tibble: 12 × 7\n   .model_id .model_desc .key       .index       .value .conf_lo .conf_hi\n       &lt;int&gt; &lt;chr&gt;       &lt;fct&gt;      &lt;date&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1         2 PROPHET     prediction 2024-01-01 -127.       -584.     329.\n 2         2 PROPHET     prediction 2024-02-01 -132.       -588.     324.\n 3         2 PROPHET     prediction 2024-03-01 -121.       -578.     335.\n 4         2 PROPHET     prediction 2024-04-01  -67.1      -523.     389.\n 5         2 PROPHET     prediction 2024-05-01  706.        249.    1162.\n 6         2 PROPHET     prediction 2024-06-01  770.        314.    1227.\n 7         2 PROPHET     prediction 2024-07-01   -0.832    -457.     456.\n 8         2 PROPHET     prediction 2024-08-01  -58.1      -514.     398.\n 9         2 PROPHET     prediction 2024-09-01   -7.89     -464.     448.\n10         2 PROPHET     prediction 2024-10-01 -101.       -557.     356.\n11         2 PROPHET     prediction 2024-11-01 -135.       -591.     322.\n12         2 PROPHET     prediction 2024-12-01 -128.       -584.     329.\n\n\n\nplot_modeltime_forecast(forecast)\n\n\n\n\n\n\nrefit_tbl &lt;- calibration_table |&gt;\n  modeltime_refit(data = poud_pred_tbl)\n\nfrequency = 12 observations per 1 year\n\n\nDisabling weekly seasonality. Run prophet with weekly.seasonality=TRUE to override this.\n\n\nDisabling daily seasonality. Run prophet with daily.seasonality=TRUE to override this.\n\nrefit_tbl |&gt;\n  modeltime_forecast(h = \"12 months\", actual_data = poud_tbl) |&gt;\n  plot_modeltime_forecast()\n\nError: No date or date-time identified.\n\n\nWarning: Unknown or uninitialised column: `.key`.\n\n\n\n\n\n\n#Data Retrieval\n\nlibrary(dataRetrieval)\n\nreal_poudre_flow &lt;- readNWISdv(siteNumber = \"06752260\", \n                               startDate = \"2024-01-01\", \n                               endDate = \"2024-12-31\", \n                               parameterCd = \"00060\") |&gt;\n  renameNWISColumns() |&gt;\n  mutate(month = yearmonth(Date)) |&gt; \n  group_by(month) |&gt;\n  summarise(real_flow = mean(Flow))\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2024-01-01&endDT=2024-12-31\n\n\n\npreds &lt;- forecast %&gt;%\n  filter(.key == \"prediction\") %&gt;%\n  select(month = .index, predicted = .value)\n\ncomparison &lt;- left_join(preds, real_poudre_flow, by = \"month\") %&gt;%\n  drop_na()\n\n#R-Squared\n\nrsq_val &lt;- lm(real_flow ~ predicted, data = comparison) %&gt;%\n  glance() %&gt;%\n  pull(r.squared)\nprint(rsq_val)\n\n[1] 0.8249846\n\n\n#The model explains 82% of the variance, or is 82% accurate in comparison to the actual data.\n#Predicted vs Observed Plot\n\nggplot(comparison, aes(x = real_flow, y = predicted)) + \n  geom_point(size = 3, color = \"lightblue\") + \n  geom_smooth(method = \"lm\", color = \"blue\", se = FALSE) + \n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"black\") + \n  labs(\n    title = \"Predicted Versus Observed Streamflow\", \n    x = \"Observed (cfs)\", \n    y = \"Predicted (cfs)\") + \n  theme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]